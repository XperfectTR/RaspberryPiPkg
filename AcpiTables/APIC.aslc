/*
 * [APIC] ACPI Table.
 *
 * Copyright (c), 2018, Andrey Warkentin <andrey.warkentin@gmail.com>
 *
 * This program and the accompanying materials
 * are licensed and made available under the terms and conditions of the BSD License
 * which accompanies this distribution.  The full text of the license may be found at
 * http://opensource.org/licenses/bsd-license.php
 *
 * THE PROGRAM IS DISTRIBUTED UNDER THE BSD LICENSE ON AN "AS IS" BASIS,
 * WITHOUT WARRANTIES OR REPRESENTATIONS OF ANY KIND, EITHER EXPRESS OR IMPLIED.
 */

#include <IndustryStandard/Acpi.h>

#define MY_MADT_REVISION (EFI_ACPI_6_2_MULTIPLE_APIC_DESCRIPTION_TABLE_REVISION + 1)
#define OEM_REVISION     1

#define BICC_TYPE 0x80

//
// GICC-like structure for the BCM chip.
//
typedef struct {
  UINT8   Type;
  UINT8   Length;
  UINT16  Reserved0;
  UINT32  CPUInterfaceNumber;
  UINT32  AcpiProcessorUid;
#define BIC_ENABLED                     BIT0
#define BIC_PERFORMANCE_INTERRUPT_MODEL BIT1
  UINT32  Flags;
#define BIC_USES_PSCI                   0
  UINT32  ParkingProtocolVersion;
  UINT32  PerformanceInterruptGsiv;
  UINT32  GPUInterruptGsiv;
  UINT64  ParkedAddress;
  UINT64  PhysicalBaseAddress;
  UINT64  MPIDR;
  UINT8   ProcessorPowerEfficiencyClass;
  UINT8   Reserved2[7];
} BICC;

#pragma pack (1)
typedef struct {
  EFI_ACPI_6_2_MULTIPLE_APIC_DESCRIPTION_TABLE_HEADER Header;
  BICC Cpus[4];
} MY_MADT;
#pragma pack ()

MY_MADT Madt = {
  {
    {
      EFI_ACPI_1_0_APIC_SIGNATURE,
      sizeof (MY_MADT),
      MY_MADT_REVISION,
      0x00, // Checksum will be updated at runtime
      {'R', 'P', 'i', 'E', 'F', 'I'},
      SIGNATURE_64('R','P','i','3','U','E','F','I'),
      OEM_REVISION,
      SIGNATURE_32('R','P','i','3'),
      0
    },

    //
    // BCM2836 local interrupt controller
    // address.
    //
    FixedPcdGet32(PcdInterruptBaseAddress),
    0, // Flags
  },
  {
    {
      BICC_TYPE,
      sizeof(BICC),
      0, // Reserved 0
      0, // CPU0
      0, // _UID
      BIC_ENABLED,
      BIC_USES_PSCI,
      9, // PerformanceInterruptGsiv
      8, // GPUInterruptGsiv
      0, // ParkedAddress
      FixedPcdGet32(PcdInterruptBaseAddress), // PhysicalBaseAddress
      0, // MPIDR
      0, // ProcessorEfficiencyClass
      {0, 0, 0, 0, 0, 0, 0} // Reserved 2
    },
    {
      BICC_TYPE,
      sizeof(BICC),
      0, // Reserved 0
      1, // CPU0
      1, // _UID
      BIC_ENABLED,
      BIC_USES_PSCI,
      9, // PerformanceInterruptGsiv
      8, // GPUInterruptGsiv
      0, // ParkedAddress
      FixedPcdGet32(PcdInterruptBaseAddress), // PhysicalBaseAddress
      1, // MPIDR
      0, // ProcessorEfficiencyClass
      {0, 0, 0, 0, 0, 0, 0} // Reserved 2
    },
    {
      BICC_TYPE,
      sizeof(BICC),
      0, // Reserved 0
      2, // CPU0
      2, // _UID
      BIC_ENABLED,
      BIC_USES_PSCI,
      9, // PerformanceInterruptGsiv
      8, // GPUInterruptGsiv
      0, // ParkedAddress
      FixedPcdGet32(PcdInterruptBaseAddress), // PhysicalBaseAddress
      2, // MPIDR
      0, // ProcessorEfficiencyClass
      {0, 0, 0, 0, 0, 0, 0} // Reserved 2
    },
    {
      BICC_TYPE,
      sizeof(BICC),
      0, // Reserved 0
      3, // CPU0
      3, // _UID
      BIC_ENABLED,
      BIC_USES_PSCI,
      9, // PerformanceInterruptGsiv
      8, // GPUInterruptGsiv
      0, // ParkedAddress
      FixedPcdGet32(PcdInterruptBaseAddress), // PhysicalBaseAddress
      3, // MPIDR
      0, // ProcessorEfficiencyClass
      {0, 0, 0, 0, 0, 0, 0} // Reserved 2
    },
  }
};

VOID*
ReferenceAcpiTable (
                    VOID
                    )
{
  //
  // Reference the table being generated to prevent the optimizer from removing the
  // data structure from the executable
  //
  return (VOID*)&Madt;
}
